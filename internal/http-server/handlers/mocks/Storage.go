// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	psql "github.com/larinkir/command_api/internal/storage/psql"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// DeleteCommand provides a mock function with given fields: id, name
func (_m *Storage) DeleteCommand(id int, name string) (*psql.ReturnCommand, error) {
	ret := _m.Called(id, name)

	var r0 *psql.ReturnCommand
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*psql.ReturnCommand, error)); ok {
		return rf(id, name)
	}
	if rf, ok := ret.Get(0).(func(int, string) *psql.ReturnCommand); ok {
		r0 = rf(id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psql.ReturnCommand)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCommands provides a mock function with given fields:
func (_m *Storage) GetAllCommands() ([]psql.Command, error) {
	ret := _m.Called()

	var r0 []psql.Command
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]psql.Command, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []psql.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]psql.Command)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommand provides a mock function with given fields: id
func (_m *Storage) GetCommand(id string) (*psql.Command, error) {
	ret := _m.Called(id)

	var r0 *psql.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*psql.Command, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *psql.Command); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psql.Command)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCommand provides a mock function with given fields: commandName
func (_m *Storage) SaveCommand(commandName string) (*psql.ReturnCommand, error) {
	ret := _m.Called(commandName)

	var r0 *psql.ReturnCommand
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*psql.ReturnCommand, error)); ok {
		return rf(commandName)
	}
	if rf, ok := ret.Get(0).(func(string) *psql.ReturnCommand); ok {
		r0 = rf(commandName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*psql.ReturnCommand)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commandName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
